---
title: "AutoML"
author: "Chris Kennedy"
date: "2025-08-28"
format:
  html:
    toc: true
    toc_depth: 3
    toc_float: yes
---

```{r load_data}
# Created in clean-dataset.Rmd
load(here::here("data/clean-dataset.RData"))

suppressMessages({ # hide unnecessary messages when loading these.
library(h2o)
library(tidymodels)
library(agua)
})

```

::: callout-note
## Note

h2o requires Java JDK to be installed on your system and configured, which is kind of a whole thing. Give this code a try and if it works awesome, and if not it's ok to just get the overall concept.

If you do want to install Java JDK, [this page will walk you through Windows or Mac installs](https://www.geeksforgeeks.org/java/setting-environment-java/) as one option.
:::

## Start h2o

```{r start_h2o}

# By default this will use all available CPU cores, which will swamp a shared server.
# On a shared server, may need to change default port, and set username and password.
h2o.init(nthreads = 1L, strict_version_check = FALSE)
```

## Auto ML

```{r auto_ml}
# We need this to be TRUE.
agua::h2o_running()

# Convert outcome to a factor... sigh.
df[[outcome]] = factor(df[[outcome]], labels = c("no", "yes"))

# See also: ?details_auto_ml_h2o

# Via https://agua.tidymodels.org/reference/automl-tools.html#ref-examples
# See ?details_auto_ml_h2o
auto_fit = auto_ml() |>
   set_engine("h2o",
              # In reality we might set this to 24 hours or something big.
              max_runtime_secs = 5,
              # Create 20% validation set to evaluate performance.
              validation = 0.2,
              exclude_algos = NULL)  |>
   set_mode("classification") |>
   # Factor variables will automatically be converted to indicator variables here.
   fit(depression ~ ., data = df[, c(predictors, outcome)])
```

## Interpret

```{r interpret, fig.width = 10}

auto_fit

# Plot all the metrics.
autoplot(auto_fit)

```

## Challenges

1. Skim the documentation for `auto_ml()` and see what other options you might want to set.

2. Check out the first two readings below and try more advanced options.

3. Try out AutoGluon using python - you can use Cline to help write it if desired.

## Readings

See (https://agua.tidymodels.org/articles/auto_ml.html) for a much better tutorial!

[H2O AutoML: Automatic Machine Learning](https://docs.h2o.ai/h2o/latest-stable/h2o-docs/automl.html)

[AutoGluon Tabular - Quick Start](https://auto.gluon.ai/stable/tutorials/tabular/tabular-quick-start.html)